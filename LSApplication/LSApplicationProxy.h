#import "LSBundleProxy.h"
@class _LSDiskUsage,_LSApplicationState;
@interface LSApplicationProxy : LSBundleProxy<NSSecureCoding> {
    NSString * _deviceIdentifierVendorName;
    NSArray * _pluginUUIDs;
    NSNumber * _versionID;
    bool _userInitiatedUninstall;
    int _bundleModTime;
    NSArray * _plugInKitPlugins;
    NSString * _companionApplicationIdentifier;
    NSArray * _counterpartIdentifiers;
    NSDate * _registeredDate;
    NSNumber * _itemID;
    NSString * _vendorName;
    NSString * _itemName;
    NSString * _genre;
    NSNumber * _genreID;
    NSString * _minimumSystemVersion;
    NSString * _maximumSystemVersion;
    NSString * _shortVersionString;
    NSString * _preferredArchitecture;
    _LSDiskUsage * _diskUsage;
    _LSApplicationState * _appState;
    NSNumber * _purchaserDSID;
    NSNumber * _downloaderDSID;
    NSNumber * _familyID;
    unsigned long long _installType;
    unsigned long long _originalInstallType;
    NSArray * _deviceFamily;
    NSArray * _activityTypes;
    NSString * _teamID;
    NSNumber * _storeFront;
    NSNumber * _ratingRank;
    NSString * _ratingLabel;
    NSString * _sourceAppIdentifier;
    NSString * _applicationVariant;
    NSString * _watchKitVersion;
    NSString * _complicationPrincipalClass;
    NSArray * _supportedComplicationFamilies;
    NSNumber * _installFailureReason;
}
@property (nonatomic) bool userInitiatedUninstall;
@property (readonly,nonatomic) int bundleModTime;
@property (readonly,nonatomic) bool supportsAlternateIconNames;
@property (readonly,nonatomic) NSString * applicationIdentifier;
@property (readonly,nonatomic) NSString * companionApplicationIdentifier;
@property (readonly,nonatomic) NSArray * counterpartIdentifiers;
@property (readonly,nonatomic) NSDate * registeredDate;
@property (readonly,nonatomic) NSNumber * itemID;
@property (readonly,nonatomic) NSString * vendorName;
@property (readonly,nonatomic) NSString * itemName;
@property (readonly,nonatomic) NSString * storeCohortMetadata;
@property (readonly,nonatomic) NSString * genre;
@property (readonly,nonatomic) NSNumber * genreID;
@property (readonly,nonatomic) NSArray * subgenres;
@property (readonly,nonatomic) NSArray * staticShortcutItems;
@property (readonly,nonatomic) NSString * minimumSystemVersion;
@property (readonly,nonatomic) NSString * maximumSystemVersion;
@property (readonly,nonatomic) NSString * shortVersionString;
@property (readonly,nonatomic) NSString * preferredArchitecture;
@property (readonly,nonatomic) NSString * applicationType;
@property (readonly,nonatomic) NSArray * directionsModes;
@property (readonly,nonatomic) NSArray * UIBackgroundModes;
@property (readonly,nonatomic) NSArray * audioComponents;
@property (readonly,nonatomic) NSUUID * deviceIdentifierForVendor;
@property (readonly,nonatomic) NSUUID * deviceIdentifierForAdvertising;
@property (readonly,nonatomic) NSProgress * installProgress;
@property (readonly,nonatomic) NSNumber * staticDiskUsage;
@property (readonly,nonatomic) NSNumber * dynamicDiskUsage;
@property (readonly,nonatomic) NSNumber * ODRDiskUsage;
@property (readonly,nonatomic) _LSDiskUsage * diskUsage;
@property (readonly,nonatomic) _LSApplicationState * appState;
@property (readonly,nonatomic,getter=isInstalled) bool installed;
@property (readonly,nonatomic,getter=isPlaceholder) bool placeholder;
@property (readonly,nonatomic,getter=isRestricted) bool restricted;
@property (readonly,nonatomic,getter=isRemovedSystemApp) bool removedSystemApp;
@property (readonly,nonatomic) NSArray * VPNPlugins;
@property (readonly,nonatomic) NSArray * plugInKitPlugins;
@property (readonly,nonatomic) NSArray * appTags;
@property (readonly,nonatomic) NSString * applicationDSID;
@property (readonly,nonatomic) NSNumber * purchaserDSID;
@property (readonly,nonatomic) NSNumber * downloaderDSID;
@property (readonly,nonatomic) NSNumber * familyID;
@property (readonly,nonatomic) unsigned long long installType;
@property (readonly,nonatomic) unsigned long long originalInstallType;
@property (readonly,nonatomic) NSArray * requiredDeviceCapabilities;
@property (readonly,nonatomic) NSArray * deviceFamily;
@property (readonly,nonatomic) NSArray * activityTypes;
@property (readonly,nonatomic) NSArray * externalAccessoryProtocols;
@property (readonly,nonatomic) NSString * teamID;
@property (readonly,nonatomic) NSNumber * storeFront;
@property (readonly,nonatomic) NSNumber * externalVersionIdentifier;
@property (readonly,nonatomic) NSNumber * betaExternalVersionIdentifier;
@property (readonly,nonatomic) NSNumber * ratingRank;
@property (readonly,nonatomic) NSString * ratingLabel;
@property (readonly,nonatomic) NSString * sourceAppIdentifier;
@property (readonly,nonatomic) NSString * applicationVariant;
@property (readonly,nonatomic,getter=isAppUpdate) bool appUpdate;
@property (readonly,nonatomic) bool hasParallelPlaceholder;
@property (readonly,nonatomic,getter=isNewsstandApp) bool newsstandApp;
@property (readonly,nonatomic,getter=isWhitelisted) bool whitelisted;
@property (readonly,nonatomic,getter=isAppStoreVendable) bool appStoreVendable;
@property (readonly,nonatomic,getter=isDeviceBasedVPP) bool deviceBasedVPP;
@property (readonly,nonatomic,getter=isBetaApp) bool betaApp;
@property (readonly,nonatomic,getter=isAdHocCodeSigned) bool adHocCodeSigned;
@property (readonly,nonatomic) bool supportsAudiobooks;
@property (readonly,nonatomic,getter=isLaunchProhibited) bool launchProhibited;
@property (readonly,nonatomic) bool supportsODR;
@property (readonly,nonatomic) bool hasSettingsBundle;
@property (readonly,nonatomic) bool supportsExternallyPlayableContent;
@property (readonly,nonatomic) bool supportsOpenInPlace;
@property (readonly,nonatomic) bool fileSharingEnabled;
@property (readonly,nonatomic) bool iconIsPrerendered;
@property (readonly,nonatomic) bool iconUsesAssetCatalog;
@property (readonly,nonatomic,getter=isPurchasedReDownload) bool purchasedReDownload;
@property (readonly,nonatomic) bool hasMIDBasedSINF;
@property (readonly,nonatomic) bool missingRequiredSINF;
@property (readonly,nonatomic) bool supportsPurgeableLocalStorage;
@property (readonly,nonatomic,getter=isDeletable) bool deletable;
@property (readonly,nonatomic,getter=isRemoveableSystemApp) bool removeableSystemApp;
@property (readonly,nonatomic,getter=isWatchKitApp) bool watchKitApp;
@property (readonly,nonatomic) NSString * watchKitVersion;
@property (readonly) NSString * complicationPrincipalClass;
@property (readonly) NSArray * supportedComplicationFamilies;
@property (readonly,nonatomic) bool hasCustomNotification;
@property (readonly) bool hasComplication;
@property (readonly,nonatomic) bool hasGlance;
@property (readonly,nonatomic) bool shouldSkipWatchAppInstall;
@property (readonly,nonatomic,getter=isGameCenterEnabled) bool gameCenterEnabled;
@property (readonly,nonatomic) bool gameCenterEverEnabled;
@property (readonly,nonatomic) NSNumber * installFailureReason;
+ (id)applicationProxyWithBundleUnitID:(unsigned int)v1 withContext:(struct LSContext *)v2;
+ (id)applicationProxyForIdentifier:(id)v1 withContext:(struct LSContext *)v2;
+ (id)applicationProxyForBundleType:(unsigned long long)v1 identifier:(id)v2 isCompanion:(bool)v3 URL:(id)v4 itemID:(id)v5 bundleUnit:(unsigned int *)v6;
+ (id)applicationProxyForIdentifier:(id)v1;
+ (id)applicationProxyForIdentifier:(id)v1 placeholder:(bool)v2;
+ (id)applicationProxyForCompanionIdentifier:(id)v1;
+ (id)applicationProxyForSystemPlaceholder:(id)v1;
+ (id)applicationProxyForBundleURL:(id)v1;
+ (id)applicationProxyForItemID:(id)v1;
+ (bool)supportsSecureCoding;
+ (id)iconQueue;
- (id)localizedNameForContext:(id)v1 preferredLocalizations:(id)v2 useShortNameOnly:(bool)v3;
- (id)localizedNameForContext:(id)v1;
- (id)localizedNameForContext:(id)v1 preferredLocalizations:(id)v2;
- (id)localizedNameWithPreferredLocalizations:(id)v1 useShortNameOnly:(bool)v2;
- (id)_initWithBundleUnit:(unsigned int)v1 context:(struct LSContext *)v2 applicationIdentifier:(id)v3;
- (void)dealloc;
- (void)encodeWithCoder:(id)v1;
- (id)initWithCoder:(id)v1;
- (id)uniqueIdentifier;
- (void)clearAdvertisingIdentifier;
- (void)setAlternateIconName:(id)v1 withResult:(void (^ /* unknown block signature */)(void))v2;
- (id)alternateIconName;
- (id)getBundleMetadata;
- (id)installProgressSync;
- (id)resourcesDirectoryURL;
- (id)iconDataForVariant:(int)v1 preferredIconName:(id)v2 withOptions:(int)v3;
- (id)iconDataForVariant:(int)v1;
- (id)iconDataForVariant:(int)v1 withOptions:(int)v2;
- (id)primaryIconDataForVariant:(int)v1;
- (bool)profileValidated;
- (bool)UPPValidated;
- (id)description;
- (id)signerOrganization;
@end
